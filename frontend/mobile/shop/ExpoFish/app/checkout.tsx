/*import React, { useState, useEffect } from "react";
import { View, Text, ActivityIndicator, Alert, StyleSheet } from "react-native";
import { Picker } from "@react-native-picker/picker";

const NOVA_POSHTA_API_KEY = "cea2c8a0f65bd3ce3926759fe4002282"; // üî• –í—Å—Ç–∞–≤—å —Å–≤–æ–π API-–∫–ª—é—á!

export default function NovaPoshtaSelector() {
  const [areas, setAreas] = useState([]);
  const [selectedArea, setSelectedArea] = useState("");
  const [cities, setCities] = useState([]);
  const [selectedCity, setSelectedCity] = useState("");
  const [warehouses, setWarehouses] = useState([]);
  const [selectedWarehouse, setSelectedWarehouse] = useState("");
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetchAreas();
  }, []);

  useEffect(() => {
    if (selectedArea) {
      fetchCities(selectedArea);
    }
  }, [selectedArea]);

  useEffect(() => {
    if (selectedCity) {
      fetchWarehouses(selectedCity);
    }
  }, [selectedCity]);

  // üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π
  const fetchAreas = async () => {
    setLoading(true);
    try {
      const response = await fetch("https://api.novaposhta.ua/v2.0/json/", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          apiKey: NOVA_POSHTA_API_KEY,
          modelName: "Address",
          calledMethod: "getAreas",
          methodProperties: {},
        }),
      });

      const data = await response.json();
      console.log("üìç –û–±–ª–∞—Å—Ç–∏:", data);

      if (data.success && data.data.length > 0) {
        setAreas(data.data);
      } else {
        Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–ª–∞—Å—Ç–∏.");
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π:", error);
      Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–ª–∞—Å—Ç–∏.");
    } finally {
      setLoading(false);
    }
  };

  // üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –æ–±–ª–∞—Å—Ç–∏
  const fetchCities = async (areaRef) => {
    setLoading(true);
    try {
      const response = await fetch("https://api.novaposhta.ua/v2.0/json/", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          apiKey: NOVA_POSHTA_API_KEY,
          modelName: "Address",
          calledMethod: "getCities",
          methodProperties: { AreaRef: areaRef },
        }),
      });

      const data = await response.json();
      console.log("üìç –ì–æ—Ä–æ–¥–∞:", data);

      if (data.success && data.data.length > 0) {
        setCities(data.data);
      } else {
        Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ä–æ–¥–∞.");
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–æ–≤:", error);
      Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ä–æ–¥–∞.");
    } finally {
      setLoading(false);
    }
  };

  // üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–¥–µ–ª–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥—É
  const fetchWarehouses = async (cityRef) => {
    setLoading(true);
    try {
      const response = await fetch("https://api.novaposhta.ua/v2.0/json/", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          apiKey: NOVA_POSHTA_API_KEY,
          modelName: "AddressGeneral",
          calledMethod: "getWarehouses",
          methodProperties: { CityRef: cityRef },
        }),
      });

      const data = await response.json();
      console.log("üè¢ –û—Ç–¥–µ–ª–µ–Ω–∏—è:", data);

      if (data.success && data.data.length > 0) {
        setWarehouses(data.data);
      } else {
        Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–¥–µ–ª–µ–Ω–∏—è.");
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–π:", error);
      Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–¥–µ–ª–µ–Ω–∏—è.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å:</Text>
      {loading ? (
        <ActivityIndicator size="large" color="blue" />
      ) : (
        <Picker selectedValue={selectedArea} onValueChange={(value) => setSelectedArea(value)}>
          <Picker.Item label="–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å" value="" />
          {areas.map((area) => (
            <Picker.Item key={area.Ref} label={area.Description} value={area.Ref} />
          ))}
        </Picker>
      )}

      <Text style={styles.title}>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:</Text>
      {loading ? (
        <ActivityIndicator size="large" color="blue" />
      ) : (
        <Picker selectedValue={selectedCity} onValueChange={(value) => setSelectedCity(value)}>
          <Picker.Item label="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥" value="" />
          {cities.map((city) => (
            <Picker.Item key={city.Ref} label={city.Description} value={city.Ref} />
          ))}
        </Picker>
      )}

      <Text style={styles.title}>–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ:</Text>
      {loading ? (
        <ActivityIndicator size="large" color="blue" />
      ) : (
        <Picker selectedValue={selectedWarehouse} onValueChange={(value) => setSelectedWarehouse(value)}>
          <Picker.Item label="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ" value="" />
          {warehouses.map((wh) => (
            <Picker.Item key={wh.Ref} label={wh.Description} value={wh.Ref} />
          ))}
        </Picker>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: "#f8f8f8" },
  title: { fontSize: 18, fontWeight: "bold", marginVertical: 10 },
});
*/
import React, { useState, useEffect } from "react";
import { View, Text, TextInput, TouchableOpacity, StyleSheet, ActivityIndicator, Alert } from "react-native";
import { Picker } from "@react-native-picker/picker";
import { useCart } from "../components/ui/CartContext";
import { useRouter } from "expo-router";
import DeliveryMethodSelector from "./DeliveryMethodSelector";

const NOVA_POSHTA_API_KEY = "cea2c8a0f65bd3ce3926759fe4002282"; // üî• –í—Å—Ç–∞–≤—å API-–∫–ª—é—á

export default function CheckoutScreen() {
  const { cart, clearCart } = useCart();
  const router = useRouter();

  // üè¢ –í—ã–±–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã
  const [deliveryMethod, setDeliveryMethod] = useState("");
  const [paymentMethod, setPaymentMethod] = useState("");
  const [comment, setComment] = useState("");
  const [agreeToTerms, setAgreeToTerms] = useState(false);
  const [noCall, setNoCall] = useState(false);

  // üì¶ API –ù–æ–≤–æ–π –ü–æ—á—Ç—ã
  const [areas, setAreas] = useState([]);
  const [selectedArea, setSelectedArea] = useState("");
  const [cities, setCities] = useState([]);
  const [selectedCity, setSelectedCity] = useState("");
  const [warehouses, setWarehouses] = useState([]);
  const [selectedWarehouse, setSelectedWarehouse] = useState("");
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (deliveryMethod === "–ù–æ–≤–∞—è –ü–æ—á—Ç–∞") {
      fetchAreas();
    }
  }, [deliveryMethod]);

  useEffect(() => {
    if (selectedArea) {
      fetchCities(selectedArea);
    }
  }, [selectedArea]);

  useEffect(() => {
    if (selectedCity) {
      fetchWarehouses(selectedCity);
    }
  }, [selectedCity]);

  // üìå –ó–∞–ø—Ä–æ—Å –æ–±–ª–∞—Å—Ç–µ–π
  const fetchAreas = async () => {
    setLoading(true);
    try {
      const response = await fetch("https://api.novaposhta.ua/v2.0/json/", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          apiKey: NOVA_POSHTA_API_KEY,
          modelName: "Address",
          calledMethod: "getAreas",
          methodProperties: {},
        }),
      });

      const data = await response.json();
      if (data.success) {
        setAreas(data.data);
      } else {
        Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–ª–∞—Å—Ç–∏.");
      }
    } catch (error) {
      Alert.alert("–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π.");
    } finally {
      setLoading(false);
    }
  };

  // üìå –ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–æ–≤
  const fetchCities = async (areaRef) => {
    setLoading(true);
    try {
      const response = await fetch("https://api.novaposhta.ua/v2.0/json/", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          apiKey: NOVA_POSHTA_API_KEY,
          modelName: "Address",
          calledMethod: "getCities",
          methodProperties: { AreaRef: areaRef },
        }),
      });

      const data = await response.json();
      if (data.success) {
        setCities(data.data);
      } else {
        Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ä–æ–¥–∞.");
      }
    } catch (error) {
      Alert.alert("–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–æ–≤.");
    } finally {
      setLoading(false);
    }
  };

  // üìå –ó–∞–ø—Ä–æ—Å –æ—Ç–¥–µ–ª–µ–Ω–∏–π
  const fetchWarehouses = async (cityRef) => {
    setLoading(true);
    try {
      const response = await fetch("https://api.novaposhta.ua/v2.0/json/", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          apiKey: NOVA_POSHTA_API_KEY,
          modelName: "AddressGeneral",
          calledMethod: "getWarehouses",
          methodProperties: { CityRef: cityRef },
        }),
      });


      const data = await response.json();
      if (data.success) {
        setWarehouses(data.data);
      } else {
        Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–¥–µ–ª–µ–Ω–∏—è.");
      }
    } catch (error) {
      Alert.alert("–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–π.");
    } finally {
      setLoading(false);
    }
  };

  // üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–∞
  const handleOrder = async () => {
    if (deliveryMethod === "–ù–æ–≤–∞—è –ü–æ—á—Ç–∞" && (!selectedArea || !selectedCity || !selectedWarehouse)) {
      Alert.alert("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å, –≥–æ—Ä–æ–¥ –∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ.");
      return;
    }
    const orderData = {
      userId: "1",
      deliveryMethod,
      address: `${areas.find(a => a.Ref === selectedArea)?.Description || ""}, 
                ${cities.find(c => c.Ref === selectedCity)?.Description || ""}, 
                ${warehouses.find(w => w.Ref === selectedWarehouse)?.Description || ""}`, // ‚úÖ –¢–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å
      totalPrice: cart.reduce((sum, item) => sum + item.price * item.quantity, 0),
      items: cart.map(item => ({
        productId: item.id,
        productName: item.name,
        price: item.price,
        quantity: item.quantity,
      })),
    };
  
    try {
      const response = await fetch("http://10.0.2.2:5000/api/orders", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(orderData),
      });
  
      console.log("üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞:", JSON.stringify(orderData, null, 2));

      const result = await response.json();
      console.log("üì© –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", result);
      Alert.alert("–£—Å–ø–µ—à–Ω–æ", "–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!");
      clearCart();
      router.push("/"); 
    } catch (error) {
      Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑");
    }
  };

  return (
    <View style={styles.container}>
    {/* –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ */}
    <Text style={styles.sectionTitle}>–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</Text>
    <DeliveryMethodSelector selectedMethod={deliveryMethod} setSelectedMethod={setDeliveryMethod} />
  
    {/* –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ "–ù–æ–≤–∞—è –ü–æ—á—Ç–∞" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –æ–±–ª–∞—Å—Ç–∏, –≥–æ—Ä–æ–¥–∞, –æ—Ç–¥–µ–ª–µ–Ω–∏—è */}
    {deliveryMethod === "–ù–æ–≤–∞—è –ü–æ—á—Ç–∞" && (
      <>
        <Text style={styles.sectionTitle}>–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å:</Text>
        <Picker selectedValue={selectedArea} onValueChange={(value) => setSelectedArea(value)}>
          <Picker.Item label="–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å" value="" />
          {areas.map((area) => (
            <Picker.Item key={area.Ref} label={area.Description} value={area.Ref} />
          ))}
        </Picker>
  
        <Text style={styles.sectionTitle}>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:</Text>
        <Picker selectedValue={selectedCity} onValueChange={(value) => setSelectedCity(value)}>
          <Picker.Item label="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥" value="" />
          {cities.map((city) => (
            <Picker.Item key={city.Ref} label={city.Description} value={city.Ref} />
          ))}
        </Picker>
  
        <Text style={styles.sectionTitle}>–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ:</Text>
        <Picker selectedValue={selectedWarehouse} onValueChange={(value) => setSelectedWarehouse(value)}>
          <Picker.Item label="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ" value="" />
          {warehouses.map((wh) => (
            <Picker.Item key={wh.Ref} label={wh.Description} value={wh.Ref} />
          ))}
        </Picker>
      </>
    )}
  
    {/* –ö–Ω–æ–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ */}
    <TouchableOpacity style={styles.orderButton} onPress={handleOrder}>
  <Text style={styles.orderButtonText}>–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑</Text>
</TouchableOpacity>


  </View>)
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: "#f8f8f8" },
  sectionTitle: { fontSize: 18, fontWeight: "bold", marginVertical: 10 },
  orderButton: { backgroundColor: "#0099FF", padding: 15, borderRadius: 5, marginTop: 20 },
  orderButtonText: { color: "white", textAlign: "center", fontSize: 18, fontWeight: "bold" },
});
